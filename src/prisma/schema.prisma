datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    username      String?         @unique
    emailVerified DateTime?
    image         String?
    password      String?
    city          String?
    state         String?
    country       String?
    occupation    String?
    phoneNumber   String?
    provider      String?
    transactions  Transaction[]
    role          Role            @default(User)
    accounts      Account[]
    sessions      Session[]
    reviews       Review[]
    favorites     Favorite[]
    affiliateStat AffiliateStat[]
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
}

enum Role {
    User
    Admin
    Manager
}

model Transaction {
    id               String         @id @default(cuid())
    user             User?          @relation(fields: [user_id], references: [id])
    user_id          String?
    cost             String
    products         Product[]
    AffiliateStat    AffiliateStat? @relation(fields: [affiliateStat_id], references: [id])
    affiliateStat_id Int?
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
}

model Product {
    id             Int           @id @default(autoincrement())
    transactions   Transaction[]
    name           String
    image          String
    brand          Brand         @relation(fields: [brand_id], references: [id])
    brand_id       Int
    subcategory    Subcategory   @relation(fields: [subcategory_id], references: [id])
    subcategory_id Int
    price          Float
    description    String
    rating         Float?        @default(0)
    stock          Int           @default(25)
    soldCount      Int?
    reviews        Review[]
    favorites      Favorite[]
    ProductStat    ProductStat[]
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
}

model Brand {
    id       Int       @id @default(autoincrement())
    name     String
    products Product[]
}

model AffiliateStat {
    id             Int           @id @default(autoincrement())
    user           User          @relation(fields: [userId], references: [id])
    userId         String
    affiliateSales Transaction[]
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
}

model OverallStat {
    id                   Int           @id @default(autoincrement())
    totalCustomers       Int
    yearlySalesTotal     Float
    yearlyTotalSoldUnits Int
    year                 Int
    monthlyData          MonthlyData[]
    dailyData            DailyData[]
    salesByCategory      Json
    createdAt            DateTime      @default(now())
    updatedAt            DateTime      @updatedAt
}

model ProductStat {
    id                   Int           @id @default(autoincrement())
    product              Product       @relation(fields: [product_id], references: [id])
    product_id           Int
    yearlySalesTotal     Float
    yearlyTotalSoldUnits Int
    year                 Int
    monthlyData          MonthlyData[]
    dailyData            DailyData[]
    createdAt            DateTime      @default(now())
    updatedAt            DateTime      @updatedAt
}

model MonthlyData {
    id             Int          @id @default(autoincrement())
    month          String
    totalSales     Float
    totalUnits     Int
    productStat    ProductStat  @relation(fields: [productStat_id], references: [id])
    productStat_id Int
    OverallStat    OverallStat? @relation(fields: [overallStatId], references: [id])
    overallStatId  Int?
}

model DailyData {
    id             Int          @id @default(autoincrement())
    date           String
    totalSales     Float
    totalUnits     Int
    productStat    ProductStat  @relation(fields: [productStat_id], references: [id])
    productStat_id Int
    OverallStat    OverallStat? @relation(fields: [overallStatId], references: [id])
    overallStatId  Int?
}

model Category {
    id            Int           @id @default(autoincrement())
    name          String
    subcategories Subcategory[]
}

model Subcategory {
    id          Int       @id @default(autoincrement())
    name        String
    category    Category  @relation(fields: [category_id], references: [id])
    category_id Int
    products    Product[]
}

model Country {
    id   Int    @id @default(autoincrement())
    name String
    flag String
}

model Review {
    id          Int     @id @default(autoincrement())
    product     Product @relation(fields: [product_id], references: [id])
    product_id  Int
    user        User    @relation(fields: [user_id], references: [id])
    user_id     String
    description String
    rating      Float
}

model Favorite {
    id         Int     @id @default(autoincrement())
    user       User    @relation(fields: [user_id], references: [id])
    user_id    String
    product    Product @relation(fields: [product_id], references: [id])
    product_id Int

    @@unique([user_id, product_id])
}
