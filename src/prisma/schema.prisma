generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  username      String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  city          String?
  state         String?
  country       String?
  occupation    String?
  phoneNumber   String?
  provider      String?
  role          Role          @default(User)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  favorites     Favorite[]
  Report        Report[]
  reviews       Review[]
  sessions      Session[]
  transactions  Transaction[]
}

model Transaction {
  id              Int       @id @default(autoincrement())
  userId          String?
  checkoutSession String    @unique
  cost            Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User?     @relation(fields: [userId], references: [id])
  products        Product[] @relation("ProductToTransaction")
}

model Product {
  id            Int           @id @default(autoincrement())
  name          String
  image         String
  brandId       Int
  subcategoryId Int
  price         Float
  description   String
  rating        Float?        @default(0)
  stock         Int           @default(25)
  soldCount     Int?
  deleted       Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  favorites     Favorite[]
  brand         Brand         @relation(fields: [brandId], references: [id])
  subcategory   Subcategory   @relation(fields: [subcategoryId], references: [id])
  ProductStat   ProductStat[]
  reviews       Review[]
  transactions  Transaction[] @relation("ProductToTransaction")
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model OverallStat {
  id                   Int           @id @default(autoincrement())
  totalCustomers       Int
  yearlySalesTotal     Float
  yearlyTotalSoldUnits Int
  year                 Int           @unique
  salesByCategory      Json
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  dailyData            DailyData[]
  monthlyData          MonthlyData[]
}

model ProductStat {
  id                   Int           @id @default(autoincrement())
  productId            Int
  yearlySalesTotal     Float
  yearlyTotalSoldUnits Int
  year                 Int
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  dailyData            DailyData[]
  monthlyData          MonthlyData[]
  product              Product       @relation(fields: [productId], references: [id])
}

model MonthlyData {
  id            Int          @id @default(autoincrement())
  month         String
  totalSales    Float
  totalUnits    Int
  productStatId Int?
  overallStatId Int?
  OverallStat   OverallStat? @relation(fields: [overallStatId], references: [id])
  productStat   ProductStat? @relation(fields: [productStatId], references: [id])
}

model DailyData {
  id            Int          @id @default(autoincrement())
  date          String
  totalSales    Float
  totalUnits    Int
  productStatId Int?
  overallStatId Int?
  OverallStat   OverallStat? @relation(fields: [overallStatId], references: [id])
  productStat   ProductStat? @relation(fields: [productStatId], references: [id])
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  subcategories Subcategory[]
}

model Subcategory {
  id         Int       @id @default(autoincrement())
  name       String
  categoryId Int
  products   Product[]
  category   Category  @relation(fields: [categoryId], references: [id])
}

model Country {
  id   Int    @id @default(autoincrement())
  name String
  flag String
}

model Review {
  id          Int      @id @default(autoincrement())
  productId   Int
  userId      String
  description String
  rating      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reports     Report[]
  product     Product  @relation(fields: [productId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Report {
  id       Int     @id @default(autoincrement())
  userId   String
  reviewId Int?
  reason   String
  review   Review? @relation(fields: [reviewId], references: [id])
  user     User    @relation(fields: [userId], references: [id])
}

model Favorite {
  id        Int     @id @default(autoincrement())
  userId    String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

enum Role {
  User
  Admin
  Manager
}
